# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Monitoring.V3.Model.RequestBasedSli do
  @moduledoc """
  Service Level Indicators for which atomic units of service are counted directly.

  ## Attributes

  *   `distributionCut` (*type:* `GoogleApi.Monitoring.V3.Model.DistributionCut.t`, *default:* `nil`) - distribution_cut is used when good_service is a count of values aggregated in a Distribution that fall into a good range. The total_service is the total count of all values aggregated in the Distribution.
  *   `goodTotalRatio` (*type:* `GoogleApi.Monitoring.V3.Model.TimeSeriesRatio.t`, *default:* `nil`) - good_total_ratio is used when the ratio of good_service to total_service is computed from two TimeSeries.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :distributionCut => GoogleApi.Monitoring.V3.Model.DistributionCut.t() | nil,
          :goodTotalRatio => GoogleApi.Monitoring.V3.Model.TimeSeriesRatio.t() | nil
        }

  field(:distributionCut, as: GoogleApi.Monitoring.V3.Model.DistributionCut)
  field(:goodTotalRatio, as: GoogleApi.Monitoring.V3.Model.TimeSeriesRatio)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.RequestBasedSli do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.RequestBasedSli.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.RequestBasedSli do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
