# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.Monitoring.V3.Model.ContentMatcher do
  @moduledoc """
  Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.

  ## Attributes

  *   `content` (*type:* `String.t`, *default:* `nil`) - String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.
  *   `jsonPathMatcher` (*type:* `GoogleApi.Monitoring.V3.Model.JsonPathMatcher.t`, *default:* `nil`) - Matcher information for MATCHES_JSON_PATH and NOT_MATCHES_JSON_PATH
  *   `matcher` (*type:* `String.t`, *default:* `nil`) - The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :content => String.t() | nil,
          :jsonPathMatcher => GoogleApi.Monitoring.V3.Model.JsonPathMatcher.t() | nil,
          :matcher => String.t() | nil
        }

  field(:content)
  field(:jsonPathMatcher, as: GoogleApi.Monitoring.V3.Model.JsonPathMatcher)
  field(:matcher)
end

defimpl Poison.Decoder, for: GoogleApi.Monitoring.V3.Model.ContentMatcher do
  def decode(value, options) do
    GoogleApi.Monitoring.V3.Model.ContentMatcher.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.Monitoring.V3.Model.ContentMatcher do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
